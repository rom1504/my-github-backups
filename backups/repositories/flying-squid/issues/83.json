{
    "assignee": null,
    "body": "I've been looking around the code base, and the method used to load modules just `require()`s and then calls them at startup. I can't see a way to unload them after they have been loaded. To me this is an issue because it requires that the server must be restarted after every addition/removal of a plugin/module.",
    "closed_at": null,
    "comment_data": [
        {
            "body": "For core plugins, I'm not sure if this well ever change. For plugins (once we implement them) we might do this.\r\n\r\nThe biggest issue is that we would manually have to keep track of every event place on the server/players and remove them if a plugin is \"disabled\"... which I'm not sure if that's possible.",
            "created_at": "2015-10-22T19:40:54Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-150334564",
            "id": 150334564,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-10-22T19:40:54Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/150334564",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7506359?v=3",
                "events_url": "https://api.github.com/users/demipixel/events{/privacy}",
                "followers_url": "https://api.github.com/users/demipixel/followers",
                "following_url": "https://api.github.com/users/demipixel/following{/other_user}",
                "gists_url": "https://api.github.com/users/demipixel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demipixel",
                "id": 7506359,
                "login": "demipixel",
                "organizations_url": "https://api.github.com/users/demipixel/orgs",
                "received_events_url": "https://api.github.com/users/demipixel/received_events",
                "repos_url": "https://api.github.com/users/demipixel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demipixel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demipixel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demipixel"
            }
        },
        {
            "body": "Related to https://github.com/mhsjlw/flying-squid/issues/29\r\n\r\nThat's one of the reasons I think \"not enabling\" is better than \"cancelling\".\r\n\r\nWe may want to have nice bricks of enableable behaviours like diggingBlock, placingBlock, moving, changingWorld, ... that will all be not enabled by default and then we can have a default list of behavior to have a normal vanilla server.\r\nIf people want to disable something, even dynamically like in this issue, it won't be a problem.\r\n\r\nNow I guess it's a bit parallel to cancelling because we might want to only disable things in some particular cases dynamically. (which mean we might need both)\r\n\r\nBut I think it might make the code cleaner and let us try thing easily (for example, if you want to test a particular feature, it would be easy to disable everything but that feature)",
            "created_at": "2015-10-25T19:52:25Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-150963351",
            "id": 150963351,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-10-25T19:52:54Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/150963351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "The only real reason we need this is if we want to \"reload\" plugins (it would basically allow us to test out plugins' code without restarting the server, making development a ton faster). However, in order to do this, we'd need some way to track events and remove them.\r\n\r\nFor example, if it's a player plugin, inbetween plugins being called, we change \"player.on\" or \"player.when\" or whatever it might be so that it saves the listener somewhere. So if I have playerA and playerB and two plugins, it might look like:\r\n\r\n```\r\nplayerA.events == {\r\n  pluginA: [listen1],\r\n  pluginB: [listen1, listen2]\r\n}\r\n\r\nplayerB.events == {\r\n  pluginA: [listen1],\r\n  pluginB: [listen1, listen2]\r\n}\r\n```\r\n\r\nAs soon as we want to disable or, more likely, restart a plugin (e.g. pluginA), we simply plugin.disableFunction() it and then remove all of the listeners in our easily accessible object (e.g. go through each player and remove every listener of pluginA).\r\n\r\nA little over the top, perhaps :P",
            "created_at": "2015-11-06T09:03:56Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-154349924",
            "id": 154349924,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-06T09:04:43Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/154349924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7506359?v=3",
                "events_url": "https://api.github.com/users/demipixel/events{/privacy}",
                "followers_url": "https://api.github.com/users/demipixel/followers",
                "following_url": "https://api.github.com/users/demipixel/following{/other_user}",
                "gists_url": "https://api.github.com/users/demipixel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demipixel",
                "id": 7506359,
                "login": "demipixel",
                "organizations_url": "https://api.github.com/users/demipixel/orgs",
                "received_events_url": "https://api.github.com/users/demipixel/received_events",
                "repos_url": "https://api.github.com/users/demipixel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demipixel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demipixel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demipixel"
            }
        },
        {
            "body": "Yeah, I think something like that would work. That's similar to what I was proposing there https://github.com/mhsjlw/flying-squid/issues/32#issuecomment-151116980",
            "created_at": "2015-11-06T10:16:08Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-154370963",
            "id": 154370963,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-06T10:16:08Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/154370963",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "The thing here is plugins don't just add listeners. They add functions to the serv and player object, they add commands, ...\r\nMaybe plugins shouldn't add stuff directly to these objects, and instead they should add stuff through a light interface that would store what the plugins added and be able to remove these stuff.\r\n\r\nFor example it might go like:\r\n```js\r\nthis.addFunction(player,\"sendBlock\", (position, blockType, blockData) => {...});\r\nthis.addCommand(player,{base: 'setblock',info: 'to put a block',...});\r\nthis.addListener(player._client,'arm_animation',() => { ... });\r\n```\r\n\r\nThese 3 functions would both add the functions/listeners/commands in the real objects (`player`,`player.commands` and `player._client` in this example) and remember the name of these additions coming from this plugin in an object like:\r\n\r\n```js\r\n{\r\n  functions:[{\"obj\":player,\"functionName\":\"sendBlock\"}],\r\n  commands:[{\"obj\":player,\"commandName\":'setblock'}],\r\n  listeners:[{\"obj\":player._client,\"eventName\":'armAnimation',\"listener\":f}]\r\n}\r\n```\r\nby plugin\r\n\r\nThen we could easily (automatically) remove these added stuff when we need to remove the plugin.\r\n\r\nEDIT: well I'm not 100% sure about that idea, it still seems too complex and unmodular to me.",
            "created_at": "2015-11-26T10:17:13Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-159868268",
            "id": 159868268,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-26T10:31:00Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/159868268",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "Yeah... As much as I want reloading plugins, I don't know if I'd go that far. As it stands, though, setting player.sendBlock twice wouldn't hurt.\r\n\r\nThe other two things left are listeners and local data. Once we have saving, we can just tell it to save the data and we'll load it when we boot up the plugin again....\r\n\r\n... which still leaves us with listeners being the issue.",
            "created_at": "2015-11-26T10:43:43Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-159875264",
            "id": 159875264,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-26T10:43:43Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/159875264",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7506359?v=3",
                "events_url": "https://api.github.com/users/demipixel/events{/privacy}",
                "followers_url": "https://api.github.com/users/demipixel/followers",
                "following_url": "https://api.github.com/users/demipixel/following{/other_user}",
                "gists_url": "https://api.github.com/users/demipixel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demipixel",
                "id": 7506359,
                "login": "demipixel",
                "organizations_url": "https://api.github.com/users/demipixel/orgs",
                "received_events_url": "https://api.github.com/users/demipixel/received_events",
                "repos_url": "https://api.github.com/users/demipixel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demipixel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demipixel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demipixel"
            }
        },
        {
            "body": "\"setting player.sendBlock twice wouldn't hurt\" that means we wouldn't be able to disable(/unload) plugins, only reload them.\r\n\r\nanyway, if we only cared about listeners, we could still use my method but maybe with nicer names : \r\n```js\r\nthis.on(player._client,'arm_animation',() => { ... });\r\n```\r\nThere's not really any way around writing the `this` (or the plugin name but I don't think that's better), if we want to track what plugin added which listener to which object.\r\n",
            "created_at": "2015-11-26T11:24:24Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-159889100",
            "id": 159889100,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-26T11:24:24Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/159889100",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "Ohh I have an idea.\r\nIt's a bit hacky and it assumes plugins do listen on loading and not after but what would be possible is comparing the list of listeners before and after loading a plugin. That way you'd know what the plugin added, and you could remove it when needed.\r\n\r\n(and actually the same idea would apply for functions and whatever else)\r\n\r\n\r\nAh even simpler: we just have to listen on https://nodejs.org/api/events.html#events_event_newlistener during a plugin injection.",
            "created_at": "2015-11-26T11:26:56Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-159889491",
            "id": 159889491,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-26T11:31:45Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/159889491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "See a proof of concept of that idea there https://github.com/mhsjlw/flying-squid/pull/133\r\nResults (for player._client) : \r\n```\r\nanimations : arm_animation\r\nanimations : entity_action\r\nchat : chat\r\nchest : block_place\r\ndigging : block_dig\r\ninventory : held_item_slot\r\ninventory : window_click\r\ninventory : set_creative_slot\r\nlogout : end\r\nplaceBlock : block_place\r\npvp : use_entity\r\nrespawn : client_command\r\nsettings : settings\r\nstats : client_command\r\nupdatePositions : look\r\nupdatePositions : position\r\nupdatePositions : position_look\r\n```",
            "created_at": "2015-11-26T17:18:37Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-159962712",
            "id": 159962712,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-26T17:18:37Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/159962712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "@rom1504 But if we're doing it that way, we could've just done the old method:\r\n\r\n```js\r\nfor (var p in plugins) {\r\n  serv.on = (name, func) => {\r\n    plugins[p].listeners.push({ name: name, func: func });\r\n    serv.when.apply(this, name, func);\r\n  }\r\n  plugin[p].server(serv, settings);\r\n}\r\n```\r\n\r\nBut I sort of threw the idea away because I knew that at some point, people will want to make listeners whenever they want, not just on injects...",
            "created_at": "2015-11-26T20:37:32Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-159991197",
            "id": 159991197,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-26T20:37:32Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/159991197",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7506359?v=3",
                "events_url": "https://api.github.com/users/demipixel/events{/privacy}",
                "followers_url": "https://api.github.com/users/demipixel/followers",
                "following_url": "https://api.github.com/users/demipixel/following{/other_user}",
                "gists_url": "https://api.github.com/users/demipixel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demipixel",
                "id": 7506359,
                "login": "demipixel",
                "organizations_url": "https://api.github.com/users/demipixel/orgs",
                "received_events_url": "https://api.github.com/users/demipixel/received_events",
                "repos_url": "https://api.github.com/users/demipixel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demipixel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demipixel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demipixel"
            }
        },
        {
            "body": "yeah that would work too.\r\nDo you think we will need to have listeners not on injects often ?",
            "created_at": "2015-11-26T22:15:55Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-159999201",
            "id": 159999201,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-26T22:15:55Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/159999201",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "Yes",
            "created_at": "2015-11-26T23:55:50Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-160007566",
            "id": 160007566,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-26T23:55:50Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/160007566",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7506359?v=3",
                "events_url": "https://api.github.com/users/demipixel/events{/privacy}",
                "followers_url": "https://api.github.com/users/demipixel/followers",
                "following_url": "https://api.github.com/users/demipixel/following{/other_user}",
                "gists_url": "https://api.github.com/users/demipixel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demipixel",
                "id": 7506359,
                "login": "demipixel",
                "organizations_url": "https://api.github.com/users/demipixel/orgs",
                "received_events_url": "https://api.github.com/users/demipixel/received_events",
                "repos_url": "https://api.github.com/users/demipixel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demipixel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demipixel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demipixel"
            }
        },
        {
            "body": "Ah OK so I guess we do have to do something like  https://github.com/mhsjlw/flying-squid/issues/83#issuecomment-159889100 then",
            "created_at": "2015-11-27T00:06:05Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-160008204",
            "id": 160008204,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-27T00:06:05Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/160008204",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "Can we wait a bit before we do this? I wanna see if I can think of any better way...",
            "created_at": "2015-11-27T00:07:30Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-160008260",
            "id": 160008260,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-27T00:07:30Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/160008260",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7506359?v=3",
                "events_url": "https://api.github.com/users/demipixel/events{/privacy}",
                "followers_url": "https://api.github.com/users/demipixel/followers",
                "following_url": "https://api.github.com/users/demipixel/following{/other_user}",
                "gists_url": "https://api.github.com/users/demipixel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/demipixel",
                "id": 7506359,
                "login": "demipixel",
                "organizations_url": "https://api.github.com/users/demipixel/orgs",
                "received_events_url": "https://api.github.com/users/demipixel/received_events",
                "repos_url": "https://api.github.com/users/demipixel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/demipixel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/demipixel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/demipixel"
            }
        },
        {
            "body": "Yeah yeah sure, I wasn't planning on doing it right now anyway ^^ just writing ideas",
            "created_at": "2015-11-27T00:12:03Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-160008493",
            "id": 160008493,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2015-11-27T00:12:03Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/160008493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "> It's a bit hacky and it assumes plugins do listen on loading and not after but what would be possible is comparing the list of listeners before and after loading a plugin.\r\n\r\nMaybe I'm missing something but can't you just have the plugin remove the event listeners it has added? This is what I am doing in voxel.js plugins (ref https://github.com/PrismarineJS/flying-squid/issues/29#issuecomment-176891973), for example in https://github.com/voxel/voxel-chunkborder/blob/master/chunkborder.js#L32-L46:\r\n\r\n```javascript\r\nBorderPlugin.prototype.enable = function() {\r\n  this.shell.bind('chunkborder', 'F9');\r\n  if (this.keysPlugin) this.keysPlugin.down.on('chunkborder', this.onToggle = this.toggle.bind(this));\r\n  this.shell.on('gl-init', this.onInit = this.shaderInit.bind(this));\r\n  this.shell.on('gl-render', this.onRender = this.render.bind(this));\r\n  this.mesherPlugin.on('meshed', this.onMeshed = this.createBorderMesh.bind(this));\r\n};\r\n\r\nBorderPlugin.prototype.disable = function() {\r\n  this.mesherPlugin.removeListener('meshed', this.onMeshed);\r\n  this.shell.removeListener('gl-render', this.onRender);\r\n  this.shell.removeListener('gl-init', this.onInit);\r\n  this.shell.unbind('chunkborder');\r\n  if (this.keysPlugin) this.keysPlugin.down.removeListener('chunkborder', this.onToggle);\r\n};\r\n```\r\n\r\nThis does have the downside the plugin needs to be responsible for cleaning itself up, but arguably if the plugin is registering event listeners, it should be the one to unregister them (single responsibility principle)",
            "created_at": "2016-01-29T18:16:21Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-176894021",
            "id": 176894021,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2016-01-29T18:16:21Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/176894021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "Yeah that sounds like a good solution, that requires some more code in each plugin but it supports all kind of listening the plugin might want to do.\r\n\r\nI'll try to see how that looks with some flying-squid (internal) plugins.",
            "created_at": "2016-01-29T18:22:44Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-176895506",
            "id": 176895506,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2016-01-29T18:22:44Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/176895506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "Ah it does mean creating lot of onX functions though. Got to try to see if it doesn't clutter the code too much.",
            "created_at": "2016-01-29T18:24:57Z",
            "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83#issuecomment-176896580",
            "id": 176896580,
            "issue_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
            "updated_at": "2016-01-29T18:24:57Z",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/comments/176896580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        }
    ],
    "comments": 18,
    "comments_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83/comments",
    "created_at": "2015-10-18T14:52:33Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9680886?v=3",
                "events_url": "https://api.github.com/users/109C/events{/privacy}",
                "followers_url": "https://api.github.com/users/109C/followers",
                "following_url": "https://api.github.com/users/109C/following{/other_user}",
                "gists_url": "https://api.github.com/users/109C/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/109C",
                "id": 9680886,
                "login": "109C",
                "organizations_url": "https://api.github.com/users/109C/orgs",
                "received_events_url": "https://api.github.com/users/109C/received_events",
                "repos_url": "https://api.github.com/users/109C/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/109C/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/109C/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/109C"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-10-18T14:53:22Z",
            "event": "renamed",
            "id": 438487004,
            "rename": {
                "from": "Loading and Unloading plugins/modules dynamicly? ",
                "to": "Loading and Unloading plugins/modules dynamicly? [question]"
            },
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/events/438487004"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8526903?v=3",
                "events_url": "https://api.github.com/users/mhsjlw/events{/privacy}",
                "followers_url": "https://api.github.com/users/mhsjlw/followers",
                "following_url": "https://api.github.com/users/mhsjlw/following{/other_user}",
                "gists_url": "https://api.github.com/users/mhsjlw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mhsjlw",
                "id": 8526903,
                "login": "mhsjlw",
                "organizations_url": "https://api.github.com/users/mhsjlw/orgs",
                "received_events_url": "https://api.github.com/users/mhsjlw/received_events",
                "repos_url": "https://api.github.com/users/mhsjlw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mhsjlw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mhsjlw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mhsjlw"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-10-22T21:31:05Z",
            "event": "renamed",
            "id": 443161076,
            "rename": {
                "from": "Loading and Unloading plugins/modules dynamicly? [question]",
                "to": "Loading and unloading plugins/modules dynamically?"
            },
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/events/443161076"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8526903?v=3",
                "events_url": "https://api.github.com/users/mhsjlw/events{/privacy}",
                "followers_url": "https://api.github.com/users/mhsjlw/followers",
                "following_url": "https://api.github.com/users/mhsjlw/following{/other_user}",
                "gists_url": "https://api.github.com/users/mhsjlw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mhsjlw",
                "id": 8526903,
                "login": "mhsjlw",
                "organizations_url": "https://api.github.com/users/mhsjlw/orgs",
                "received_events_url": "https://api.github.com/users/mhsjlw/received_events",
                "repos_url": "https://api.github.com/users/mhsjlw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mhsjlw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mhsjlw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mhsjlw"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-10-22T21:31:11Z",
            "event": "labeled",
            "id": 443161217,
            "label": {
                "color": "cc317c",
                "name": "question"
            },
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/events/443161217"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-10-25T19:53:19Z",
            "event": "labeled",
            "id": 444952627,
            "label": {
                "color": "fef2c0",
                "name": "plugins"
            },
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/events/444952627"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-10-25T19:53:19Z",
            "event": "unlabeled",
            "id": 444952628,
            "label": {
                "color": "cc317c",
                "name": "question"
            },
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/events/444952628"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-11-26T20:37:32Z",
            "event": "mentioned",
            "id": 475869725,
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/events/475869725"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-11-26T20:37:32Z",
            "event": "subscribed",
            "id": 475869726,
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/events/475869726"
        }
    ],
    "events_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83/events",
    "html_url": "https://github.com/PrismarineJS/flying-squid/issues/83",
    "id": 112024085,
    "labels": [
        {
            "color": "fef2c0",
            "name": "plugins",
            "url": "https://api.github.com/repos/PrismarineJS/flying-squid/labels/plugins"
        }
    ],
    "labels_url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 83,
    "repository_url": "https://api.github.com/repos/PrismarineJS/flying-squid",
    "state": "open",
    "title": "Loading and unloading plugins/modules dynamically?",
    "updated_at": "2016-01-29T18:24:57Z",
    "url": "https://api.github.com/repos/PrismarineJS/flying-squid/issues/83",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9680886?v=3",
        "events_url": "https://api.github.com/users/109C/events{/privacy}",
        "followers_url": "https://api.github.com/users/109C/followers",
        "following_url": "https://api.github.com/users/109C/following{/other_user}",
        "gists_url": "https://api.github.com/users/109C/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/109C",
        "id": 9680886,
        "login": "109C",
        "organizations_url": "https://api.github.com/users/109C/orgs",
        "received_events_url": "https://api.github.com/users/109C/received_events",
        "repos_url": "https://api.github.com/users/109C/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/109C/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/109C/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/109C"
    }
}