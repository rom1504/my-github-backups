{
    "assignee": null,
    "body": "Just a breakdown from what I understand of the system so far, and ideas on how to maybe improve it. Please give feedback.\r\n\r\n# Mineflayer code structure\r\nOverview on the current structure of Mineflayer and some ideas for changes\r\n\r\n## Current Structure\r\nThe structure in use in the repo at the moment, to the best of my understanding\r\n\r\n### Libraries\r\n#### Biome\r\nBiome class containing `color, name, height, rainfall, temperature`\r\n#### Block\r\nBlock class containing `type, metadata, light, skyLight, add, biome, position`. Also contains `name, hardness, displayName, boundingBox, diggable, material, havestTools` extracted from the block enum.\r\n#### Chest\r\nChest reference class for interacting with a ChestWindow\r\n#### Conversions\r\nUtility class containing conversions for rotations and notchian data\r\n#### Dispenser\r\nDispenser reference class for interacting with a DispenserWindow\r\n#### Enchantment Table\r\nEnchantment Table reference class for interacting with an Enchantment Table\r\n#### Entity\r\nEntity class containing `id, type, position, velocity, yaw, pitch, onGround, height, potion effects, equipment, heldItem`\r\n#### Furnace\r\nFurnace reference class for interacting with a FurnaceWindow\r\n#### Item\r\nItem class containing `type, count, metadata, nbt`. Also `name, displayName, stackSize (max)` from the appropriate block/item enum\r\n#### Location\r\nLocation class for a position in the world containing `floored, blockPoint, chunkCorner, blockIndex, biomeBlockIndex, chunkYIndex`\r\n#### Math\r\nUtility class with `clamp, sign, euclidianMod` functions\r\n#### Painting\r\nPainting class containing `id, position, name, direction`\r\n#### Recipe\r\nRecipe class storing recipes and information about crafting them. Properties are `type, count, metadata, ingredients, requiresTable`, as well as some functions and calculated properties\r\n#### Windows\r\nWindows class providing `ChestWindow`, `CraftingTableWindow`, `FurnaceWindow`, `DispenerWindow`, `EnchantmentTableWindow` and `BrewingStandWindow`. It also exposes the parent class `Window` that is inherited by the formentioned windows. `Window` exposes functions that enable clicking and interacting with items on an inventory window, the subclasses provide functions that are window specific.\r\n\r\n### Plugins\r\n#### bed\r\nBed plugin providing `sleep` and `wake` functions as well as tracking sleep state\r\n#### block_actions\r\nBlock actions plugin tracking noteblocks, piston movement and chest lid state\r\n#### blocks\r\nBlocks plugin handles chunk data and block information, it also contains the unexposed `Column` class for a chunk column\r\n#### chat\r\nHandles parsing of incomming messages and emitting a `chat` or `whisper` event. Also provides `chat` and `whisper` functions for sending chat\r\n#### digging\r\nDigging plugin provides `dig` and `stopDigging` functions to the bot, as well as functions to query if a block is indestructable (`canDigBlock`) and how long the block will take to dig (`digTime`)\r\n#### entities\r\nProvides entity tracking including animation information about the entities in the world. This includes tracking players that have joined or left the server. Provides `attack`, `mount`, `dismount` and `useOn` functions. Exposes `players` and `entities` properties\r\n#### experience\r\nExperience plugin supports experience levels and exposes `level, points, progress` properties\r\n#### game\r\nGame plugin tracks level/dimension information and gameMode. Exposes the `game` property which contains `levelType, gameMode, hardcore, dimension, difficulty, maxPlayers`.\r\n#### health\r\nHealth plugin tracks death and health packets, exposing `health, food, foodSaturation, isAlive`.\r\n#### inventory\r\nInventory is an overpopulated plugin that ties together the Windows classes, the TileEntity classes e.g. `Chest, Furnace, Dispenser, Enchantment Table` and handles bot inventory, tracks the currently `heldItem` and the selected hotbar slot `quickBarSlot`. Provides functions to (un)equip armour and transfer items around the inventory and between the inventories of other blocks. Also handles windows opening and closing and relays them back and forth between the TileEntity classes and Windows class\r\n#### kick\r\nProvides `kicked` event and the ability to nicely leave the server via `quit`\r\n#### physics\r\nProvides a simplified implementation of AABB physics, handles movement including jumping and sprinting. Is able to query the passability of a block to determine collisions. Is used by navigation plugins for routing a path\r\n#### rain\r\nSimply tracks if it is raining or not, exposes `isRaining`\r\n#### settings\r\nHandles client settings information from the server and allows changing of settings that are sent back to the server. exposes `settings` and `setSettings`. `settings` has the properties `chat, colorsEnabled, viewDistance, difficulty, showCape`\r\n#### spawn_point\r\nExposes `spawnPoint` which is set each time the bot spawns\r\n#### time\r\nExposes `time` which has the properties `day` and `age`.\r\n\r\n### Enums\r\n#### biomes.json\r\nDictionary of all the biomes keyed by network id, each biome exposes `id, color, height, name, rainfall, temperature`\r\n#### blocks.json\r\nDictionary of all the blocks keyed by id, each block exposes `id, displayName, name, hardness, stackSize, diggable, boundingBox, material, havestTools`. `havestTools` is a dictionary of ids that work more efficiently at breaking the block\r\n#### instruments.json\r\nDictionary of instrument sounds keyed by network id, exposes `id, name`\r\n#### items.json\r\nDictionary of all the items, keyed by item id, exposes `id, displayName, stackSize, name`\r\n#### materials.json\r\nDictionary of block materials, keyed by material name containing a dictionary of havestTools and efficency multiplier. Used for digTime most likely\r\n#### recipes\r\nDictionary of craftable items, keyed by the type to be crafted. Value of each key is an array of possible recipes. Each recipe exposes `type, count, metadata, ingredients, inShape`. Type, count and metadata is the result. ingredients is an array of required ingredients in the form of `id, metadata`. `ingredients` is used for a shapeless recipe (Example: planks from logs). `inShape` is an array of arrays for the shaped crafting recipe.\r\n\r\n## Summary\r\nFor the most part the bot is very full-featured with a lot of information at it's disposal. However some structure changes could be made to make the code slightly more managable. My current concerns are Windows, Inventory management, TileEntities, and Entity tracking. As well as splitting core plugins (The ones we provide) with user plugins. A seperate folder is a simple change, but I'm mentioning it anyway.\r\n\r\n### Windows/Inventories/TileEntities\r\nCurrently the structure of these objects is in no way modular, it is spanned across individual objects in lib/, as well as the `inventory` plugin and the `windows` object. \r\n\r\nI believe the project would benefit from splitting the handling of each individual window in to a seperate file, and restructuring so that the inventory plugin would not decorate the objects in lib (Looking at you `deposit` and `withdraw`). But instead a class dedicated to the interaction of a block would be self-contained. `inventory` would not override such functions and it would not go to `windows` for the appropriate window.\r\n\r\nI think a similar structure to how plugins are done (`requireindex`) might be a cleaner alternative to the current `windows` object.\r\n\r\nAlso the player inventory is a special case and is treated as such by the server, it should be the primary function of the `inventory` plugin, as well as simply updating the slots in the currently displayed inventory. But it should not be used for opening and closing other windows. That should be handled imo elsewhere.\r\n\r\n### Entities\r\nThe way entities and players are tracked could be slightly improved, I think having some sort of proxy object that uses getters for information would help prevent references being held by the end-user. Currently if a plugin holds a reference to an entity or a player, and that entity/player is removed by the server, the reference still exists. This is something we can not help, but we can provide better means of dealing with this. \r\n\r\nEmitting an event on the object is one idea, using an isValid flag and asserting that in all get/set operations (Keeping properties private from the object) is another idea. Forcing the user to use isValid or risk an error.\r\n\r\nThis would give a very early warning to the user that they are incorrectly holding on to a reference of an entity that is no longer in existance.\r\n\r\n_NOTE: player names and ids are going away in favour of a new UUID system. This will be very important because starting from MC 1.8, users will be able to change their names to any freely available name. UUIDs will be the only way to determine who a user is when online_\r\n\r\n### All the helpers\r\nI know that core code is something that is really needed to get anything to happen at all, but I don't see much point in exposing any simple functions like click a slot or pick up an item. I'm aware that high level functions like transfer/deposit/withdraw/toss exist. I'm just putting this here as a point that we should focus strongly on helpers to keep the bot high level, and expose less low level functions.\r\n\r\nIf a third-party plugin needs access to a low level feature, we are not doing something correctly as a high level API.\r\n\r\n### More abstraction\r\nI noticed that some high level functions still individually handle and send packets directly to the client. I think this should be avoided because it creates redundant code and increases the points of failure and bugs\r\n\r\n### Promises?\r\nI, personally, am very fond of Promises (eg. [Q](https://github.com/kriskowal/q)). I would like to move a lot of the callback structure over to Promises. I feel that more structured and higher level code can be written by using an API like this. e.g.\r\n```\r\nbot.findBlock('wheat').then(function(location) {\r\n    return bot.harvestBlockAt(location);\r\n}).then(function(success) {\r\n    if(success) bot.chat('I got some wheat');\r\n    else bot.chat('I couldn't havest the wheat');\r\n}).catch(function(error) {\r\n    bot.chat('I hard failed for some reason, check console.');\r\n    console.log(error.stack);\r\n});\r\n```\r\n\r\nThis is just my opinion and I would enjoy feedback on this entire document.\r\n\r\n@andrewrk  @roblabla ",
    "closed_at": "2015-04-28T12:38:26Z",
    "comment_data": [
        {
            "body": "The promise idea (or something similar) would avoid doing something like https://github.com/andrewrk/mineflayer/blob/ce4b2606b8ff5eafd17b40c9478f73cd2d9935be/test/superflat.js#L105",
            "created_at": "2015-03-28T21:31:10Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87316188",
            "id": 87316188,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-28T21:31:10Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87316188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "Some of the inventory ideas have now been done : inventory.js has been split into several window-related files (chest.js, furnace.js). I'm not exactly sure how we could integrate with better with windows.js and lib/chest.js, lib/furnace.js,.. though.",
            "created_at": "2015-03-28T21:33:01Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87316271",
            "id": 87316271,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-28T21:33:01Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87316271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "> avoid doing something like\r\n\r\nI could have also done this:\r\nhttps://github.com/andrewrk/mineflayer/blob/ce4b2606b8ff5eafd17b40c9478f73cd2d9935be/test/superflat.js#L178\r\n\r\nI didn't really see much problem in building a 6-story [pyramid of doom](http://survivejs.com/common_problems/pyramid.html). If I'd done that for the whole array of asynchronous steps in the test (starting at https://github.com/andrewrk/mineflayer/blob/ce4b2606b8ff5eafd17b40c9478f73cd2d9935be/test/superflat.js#L92 ), then that would have been a problem.\r\n\r\nIt would be pretty easy to convert those 6 `placeBlock()` calls into an array and call `callbackChain()`; I guess I just didn't feel compelled to do it at the time.\r\n\r\nIs my programming style hard to follow?",
            "created_at": "2015-03-28T22:49:24Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87324675",
            "id": 87324675,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-28T22:49:24Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87324675",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87436?v=3",
                "events_url": "https://api.github.com/users/thejoshwolfe/events{/privacy}",
                "followers_url": "https://api.github.com/users/thejoshwolfe/followers",
                "following_url": "https://api.github.com/users/thejoshwolfe/following{/other_user}",
                "gists_url": "https://api.github.com/users/thejoshwolfe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thejoshwolfe",
                "id": 87436,
                "login": "thejoshwolfe",
                "organizations_url": "https://api.github.com/users/thejoshwolfe/orgs",
                "received_events_url": "https://api.github.com/users/thejoshwolfe/received_events",
                "repos_url": "https://api.github.com/users/thejoshwolfe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thejoshwolfe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thejoshwolfe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thejoshwolfe"
            }
        },
        {
            "body": "> Promises?\r\n\r\nSeems like we don't gain much from this. Promises are an extra layer of complexity that makes it slightly more advanced to use callbacks. I don't really see a need for them.\r\n\r\n> expose less low level functions.\r\n\r\nI don't like this idea at all. Exposing low-level functions is good. It allows users to write their own inventory management code instead of being stuck with the high-level abstractions. It's presumptuous to think that we made every high-level abstraction that could be desired.\r\n\r\n\r\nI'm not liking this issue very much. It seems kinda vague, and doesn't really move the project forward. I think the individual requests in this issue should be moved to their own issues so that we can address them separately. I'm having trouble tracking and responding to all the different topics here.",
            "created_at": "2015-03-28T22:53:49Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87324821",
            "id": 87324821,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-28T22:53:49Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87324821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87436?v=3",
                "events_url": "https://api.github.com/users/thejoshwolfe/events{/privacy}",
                "followers_url": "https://api.github.com/users/thejoshwolfe/followers",
                "following_url": "https://api.github.com/users/thejoshwolfe/following{/other_user}",
                "gists_url": "https://api.github.com/users/thejoshwolfe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thejoshwolfe",
                "id": 87436,
                "login": "thejoshwolfe",
                "organizations_url": "https://api.github.com/users/thejoshwolfe/orgs",
                "received_events_url": "https://api.github.com/users/thejoshwolfe/received_events",
                "repos_url": "https://api.github.com/users/thejoshwolfe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thejoshwolfe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thejoshwolfe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thejoshwolfe"
            }
        },
        {
            "body": "I dislike promises. It seems like a half-baked compromise really, and doesn't actually increase readability by a significant amount. What I want to do for node-minecraft-protocol and Protocols, however, is using babeljs to compile the ES6 code down to ES5, and use async/await syntax for asynchronous stuff. Of course, it isn't without problems, but it does improve the code by a very significant margin.\r\n\r\nConcerning low-level functions, the situation isn't so simple. Knowing what we expose, and what functions are \"too low\", what functions are \"too high\", is really important. We need to keep the low-level functions present, but we need to make sure they aren't _too_ low-level that they become a pain to maintain.\r\n\r\nTake bot.client for instance. If it was officially part of the API, it means the API would break with almost every release of mineflayer, due to the volatile nature of node-minecraft-protocol. That's a very low-level API that, despite being exposed, shouldn't be considered officially part of mineflayer's API. Use at your own risk sort of stuff ^^.\r\n\r\nI don't know about current low-level functions we would need to remove, but I guess we should keep them to a strict minimum to ensure we don't have to break API compat in the future.\r\n\r\nI agree this issue is really hard to work with. Splitting it would be easier to hold a proper discussion about each problem then.",
            "created_at": "2015-03-28T23:37:02Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87330050",
            "id": 87330050,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-28T23:37:02Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87330050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=3",
                "events_url": "https://api.github.com/users/roblabla/events{/privacy}",
                "followers_url": "https://api.github.com/users/roblabla/followers",
                "following_url": "https://api.github.com/users/roblabla/following{/other_user}",
                "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/roblabla",
                "id": 1069318,
                "login": "roblabla",
                "organizations_url": "https://api.github.com/users/roblabla/orgs",
                "received_events_url": "https://api.github.com/users/roblabla/received_events",
                "repos_url": "https://api.github.com/users/roblabla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/roblabla"
            }
        },
        {
            "body": "@thejoshwolfe yeah that pyramid of doom is a bit scary really :p \r\n\r\nYeah I guess your callbackChain function can avoid that indeed. (I don't really care about promises, just that combining tasks/functions shouldn't be too hard)\r\n\r\nI agree this issue is hard to work with, what should we do about it ? (we can open an issue about combining tasks, and an other about low level vs high level if needed)",
            "created_at": "2015-03-29T00:37:59Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87335146",
            "id": 87335146,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-29T00:37:59Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87335146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "> combining tasks/functions\r\n\r\nwhat do you mean by this? ",
            "created_at": "2015-03-29T00:47:17Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87335458",
            "id": 87335458,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-29T00:47:17Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87335458",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87436?v=3",
                "events_url": "https://api.github.com/users/thejoshwolfe/events{/privacy}",
                "followers_url": "https://api.github.com/users/thejoshwolfe/followers",
                "following_url": "https://api.github.com/users/thejoshwolfe/following{/other_user}",
                "gists_url": "https://api.github.com/users/thejoshwolfe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thejoshwolfe",
                "id": 87436,
                "login": "thejoshwolfe",
                "organizations_url": "https://api.github.com/users/thejoshwolfe/orgs",
                "received_events_url": "https://api.github.com/users/thejoshwolfe/received_events",
                "repos_url": "https://api.github.com/users/thejoshwolfe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thejoshwolfe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thejoshwolfe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thejoshwolfe"
            }
        },
        {
            "body": "I mean looking at whether we can find a way to combine function that would be good for mineflayer : \r\n* something like https://github.com/caolan/async\r\n* promises (but I guess no seeing at the reactions here)\r\n* some other framework\r\n* just using callbacks and redefining stuff like callbackChain every time (it might be suitable since there are many correct ways to combine actions in a bot)",
            "created_at": "2015-03-29T01:08:46Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87336393",
            "id": 87336393,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-29T01:08:46Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87336393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "Worth noting that since this issue was opened promises have been standardized and nodejs 0.12 was released with `Promise` native support, also they are available in other JavaScript environments (Chrome, Firefox, Safari), so no babeljs compile step would be needed, except for supporting older platforms. New standard APIs like fetch and ES6 module loaders are being built on top of Promise, so it does seem to be receiving a decent amount of support.\r\n\r\nasync/await are ES7, which is still in its early stages and not finalized so adopting it now may be premature.\r\n\r\nBut either of these changes would break API compatibility, right? Mineflayer describes itself as a \"powerful, *stable*, and high level JavaScript API\", the public API should not be needlessly changed drastically without very compelling reasons. Callbacks are useful as the lowest common denominator, e.g., clients independent of this module could use [Promise.denodeify](https://github.com/then/promise#promisedenodeifyfn) to convert functions accepting node-style callbacks to promises, maybe there's a way to similarly translate callbacks to ES7 async await? Either way, this could happen outside of mineflayer imho.",
            "created_at": "2015-03-29T03:59:54Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-87349588",
            "id": 87349588,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-03-29T03:59:54Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/87349588",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "I think we dealt with everything in that issue except for one thing that still isn't done : combining tasks the right way™.\r\nI opened a new more specific issue about that point here #275.\r\n\r\nSo I think we can close that issue that contain too many things.",
            "created_at": "2015-04-28T12:38:26Z",
            "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182#issuecomment-97048009",
            "id": 97048009,
            "issue_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
            "updated_at": "2015-04-28T12:38:26Z",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/comments/97048009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182/comments",
    "created_at": "2014-04-28T01:32:01Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/834342?v=3",
                "events_url": "https://api.github.com/users/nevercast/events{/privacy}",
                "followers_url": "https://api.github.com/users/nevercast/followers",
                "following_url": "https://api.github.com/users/nevercast/following{/other_user}",
                "gists_url": "https://api.github.com/users/nevercast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nevercast",
                "id": 834342,
                "login": "nevercast",
                "organizations_url": "https://api.github.com/users/nevercast/orgs",
                "received_events_url": "https://api.github.com/users/nevercast/received_events",
                "repos_url": "https://api.github.com/users/nevercast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nevercast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nevercast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nevercast"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2014-04-28T01:32:01Z",
            "event": "labeled",
            "id": 115536094,
            "label": {
                "color": "444444",
                "name": "enhancement"
            },
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/115536094"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/106511?v=3",
                "events_url": "https://api.github.com/users/andrewrk/events{/privacy}",
                "followers_url": "https://api.github.com/users/andrewrk/followers",
                "following_url": "https://api.github.com/users/andrewrk/following{/other_user}",
                "gists_url": "https://api.github.com/users/andrewrk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/andrewrk",
                "id": 106511,
                "login": "andrewrk",
                "organizations_url": "https://api.github.com/users/andrewrk/orgs",
                "received_events_url": "https://api.github.com/users/andrewrk/received_events",
                "repos_url": "https://api.github.com/users/andrewrk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/andrewrk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/andrewrk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/andrewrk"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2014-04-28T01:32:01Z",
            "event": "mentioned",
            "id": 115536095,
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/115536095"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/106511?v=3",
                "events_url": "https://api.github.com/users/andrewrk/events{/privacy}",
                "followers_url": "https://api.github.com/users/andrewrk/followers",
                "following_url": "https://api.github.com/users/andrewrk/following{/other_user}",
                "gists_url": "https://api.github.com/users/andrewrk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/andrewrk",
                "id": 106511,
                "login": "andrewrk",
                "organizations_url": "https://api.github.com/users/andrewrk/orgs",
                "received_events_url": "https://api.github.com/users/andrewrk/received_events",
                "repos_url": "https://api.github.com/users/andrewrk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/andrewrk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/andrewrk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/andrewrk"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2014-04-28T01:32:01Z",
            "event": "subscribed",
            "id": 115536096,
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/115536096"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=3",
                "events_url": "https://api.github.com/users/roblabla/events{/privacy}",
                "followers_url": "https://api.github.com/users/roblabla/followers",
                "following_url": "https://api.github.com/users/roblabla/following{/other_user}",
                "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/roblabla",
                "id": 1069318,
                "login": "roblabla",
                "organizations_url": "https://api.github.com/users/roblabla/orgs",
                "received_events_url": "https://api.github.com/users/roblabla/received_events",
                "repos_url": "https://api.github.com/users/roblabla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/roblabla"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2014-04-28T01:32:01Z",
            "event": "mentioned",
            "id": 115536097,
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/115536097"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=3",
                "events_url": "https://api.github.com/users/roblabla/events{/privacy}",
                "followers_url": "https://api.github.com/users/roblabla/followers",
                "following_url": "https://api.github.com/users/roblabla/following{/other_user}",
                "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/roblabla",
                "id": 1069318,
                "login": "roblabla",
                "organizations_url": "https://api.github.com/users/roblabla/orgs",
                "received_events_url": "https://api.github.com/users/roblabla/received_events",
                "repos_url": "https://api.github.com/users/roblabla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/roblabla"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2014-04-28T01:32:01Z",
            "event": "subscribed",
            "id": 115536098,
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/115536098"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-03-27T12:42:41Z",
            "event": "labeled",
            "id": 266843781,
            "label": {
                "color": "eb6420",
                "name": "refactoring"
            },
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/266843781"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-03-27T12:45:09Z",
            "event": "unlabeled",
            "id": 266845476,
            "label": {
                "color": "444444",
                "name": "enhancement"
            },
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/266845476"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87436?v=3",
                "events_url": "https://api.github.com/users/thejoshwolfe/events{/privacy}",
                "followers_url": "https://api.github.com/users/thejoshwolfe/followers",
                "following_url": "https://api.github.com/users/thejoshwolfe/following{/other_user}",
                "gists_url": "https://api.github.com/users/thejoshwolfe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thejoshwolfe",
                "id": 87436,
                "login": "thejoshwolfe",
                "organizations_url": "https://api.github.com/users/thejoshwolfe/orgs",
                "received_events_url": "https://api.github.com/users/thejoshwolfe/received_events",
                "repos_url": "https://api.github.com/users/thejoshwolfe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thejoshwolfe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thejoshwolfe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thejoshwolfe"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-03-29T00:37:59Z",
            "event": "mentioned",
            "id": 267760499,
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/267760499"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87436?v=3",
                "events_url": "https://api.github.com/users/thejoshwolfe/events{/privacy}",
                "followers_url": "https://api.github.com/users/thejoshwolfe/followers",
                "following_url": "https://api.github.com/users/thejoshwolfe/following{/other_user}",
                "gists_url": "https://api.github.com/users/thejoshwolfe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thejoshwolfe",
                "id": 87436,
                "login": "thejoshwolfe",
                "organizations_url": "https://api.github.com/users/thejoshwolfe/orgs",
                "received_events_url": "https://api.github.com/users/thejoshwolfe/received_events",
                "repos_url": "https://api.github.com/users/thejoshwolfe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thejoshwolfe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thejoshwolfe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thejoshwolfe"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-03-29T00:37:59Z",
            "event": "subscribed",
            "id": 267760500,
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/267760500"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-04-28T12:38:26Z",
            "event": "closed",
            "id": 291926374,
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/events/291926374"
        }
    ],
    "events_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182/events",
    "html_url": "https://github.com/PrismarineJS/mineflayer/issues/182",
    "id": 32326019,
    "labels": [
        {
            "color": "eb6420",
            "name": "refactoring",
            "url": "https://api.github.com/repos/PrismarineJS/mineflayer/labels/refactoring"
        }
    ],
    "labels_url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 182,
    "repository_url": "https://api.github.com/repos/PrismarineJS/mineflayer",
    "state": "closed",
    "title": "Code structure changes",
    "updated_at": "2015-04-28T12:38:26Z",
    "url": "https://api.github.com/repos/PrismarineJS/mineflayer/issues/182",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/834342?v=3",
        "events_url": "https://api.github.com/users/nevercast/events{/privacy}",
        "followers_url": "https://api.github.com/users/nevercast/followers",
        "following_url": "https://api.github.com/users/nevercast/following{/other_user}",
        "gists_url": "https://api.github.com/users/nevercast/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/nevercast",
        "id": 834342,
        "login": "nevercast",
        "organizations_url": "https://api.github.com/users/nevercast/orgs",
        "received_events_url": "https://api.github.com/users/nevercast/received_events",
        "repos_url": "https://api.github.com/users/nevercast/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/nevercast/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nevercast/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/nevercast"
    }
}