{
    "assignee": null,
    "body": "Adds the start of an API for \"plugin channels\" in node-minecraft-protocol\r\n\r\nUse cases include:\r\n\r\n* https://github.com/PrismarineJS/node-minecraft-protocol/issues/152 Handle official (MC| - prefixed) Custom Payload packets\r\n* https://github.com/PrismarineJS/node-minecraft-protocol/issues/114 Forge Support\r\n * https://github.com/PrismarineJS/node-minecraft-protocol/pull/326 Forge client support - experimenting building on this API for `FML|HS` in internal PR: https://github.com/deathcap/node-minecraft-protocol/pull/2\r\n* https://github.com/PrismarineJS/mineflayer/issues/361 Plugin channel API in mineflayer\r\n * [MC|AdvCdm](https://github.com/PrismarineJS/mineflayer/commit/24f24349261c5b5031ff4ec624fef670af3028a5), [MC|Brand](https://github.com/PrismarineJS/mineflayer/issues/253)\r\n\r\nTo do:\r\n\r\n* [ ] Rework to use nodejs streams",
    "closed_at": "2016-02-01T17:54:09Z",
    "comment_data": [
        {
            "body": "This could be enhanced further (let NMP deserialize the channels it knows about, have a mechanism to register custom codecs, etc.), but I think this basic implementation is good enough to integrate for now, allowing other code to build upon it - including some which may be better in separate modules (https://github.com/PrismarineJS/node-minecraft-protocol/pull/326).\r\n\r\nIs the API OK?",
            "created_at": "2016-01-24T18:48:56Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-174329035",
            "id": 174329035,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-24T18:50:29Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/174329035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "Not sure of the best API design here, does it make sense to have separate incomingPluginChannels and outgoingPluginChannels objects, or would it be cleaner to have only one pluginChannels object, with both incoming and outgoing channel sets?\r\n\r\nIf so same object could support both receiving (emitted events, `on`) and sending (`write()`), but the client/server can have different plugin channels registered, so I think they should be kept separate to some extent. Open to ideas..",
            "created_at": "2016-01-24T18:52:39Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-174329355",
            "id": 174329355,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-24T18:52:39Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/174329355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "I'm fine with both side them being separate or kept together. They both have their own set of advantages.\r\n\r\nThe way I envision the API is like so : \r\n\r\n```js\r\nvar forgeChannel = client.incomingChannel('SOME_CHANNEL_I_OWN');\r\nforgeChannel.on('data', function(data) {\r\n});\r\n```\r\n\r\nThe first call to \"incomingChannel\" should result in a \"REGISTER\" event being sent, the others the same object should be retrieved from a cache.\r\n\r\nThis has the advantage of being fully compatible with the nodejs stream api. So I can pipe stuff from and to the channel without problems. Meaning if I want to deserialize the data, I can do\r\n\r\n```js\r\nvar forgeChannel = client.incomingChannel('SOME_CHANNEL_I_OWN');\r\nforgeChannel.pipe(new Protocol([{ type: \"byte\", \"name\": \"data\" }]).createStream())\r\n.on('data', function(data) {\r\n  console.log(data.data);\r\n});\r\n```\r\n\r\n(Probably not the correct way to create a Protocol stream but nvm that :P)\r\n\r\n*EDIT* : Only outgoing channels create a `REGISTER` packet. But it doesn't change the api much.",
            "created_at": "2016-01-25T12:09:58Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-174487171",
            "id": 174487171,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-25T13:21:00Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/174487171",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=3",
                "events_url": "https://api.github.com/users/roblabla/events{/privacy}",
                "followers_url": "https://api.github.com/users/roblabla/followers",
                "following_url": "https://api.github.com/users/roblabla/following{/other_user}",
                "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/roblabla",
                "id": 1069318,
                "login": "roblabla",
                "organizations_url": "https://api.github.com/users/roblabla/orgs",
                "received_events_url": "https://api.github.com/users/roblabla/received_events",
                "repos_url": "https://api.github.com/users/roblabla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/roblabla"
            }
        },
        {
            "body": ":+1: for nodejs stream api compatibility",
            "created_at": "2016-01-25T16:21:23Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-174562511",
            "id": 174562511,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-25T16:21:23Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/174562511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "Some notes about registration:\r\n\r\nThe REGISTER/UNREGISTER packets accept multiple null-delimited channel names, and FML/Forge does send them all at once, so I think supporting multiple simultaneous registrations/unregistrations at the API level may be worthwhile.\r\n\r\nOn the other hand, it doesn't seem registration has much effect in the software I've tested. FML/Forge lets you send packets on a channel without REGISTER, and it happily proceeds just fine. On our side, packets for non-registered channels are still forwarded, it would be an extra check to drop non-registered channel payloads, not really clear why they added registration/unregistration in the first place (maybe to allocate resources? to advertise the fact that the other side supports some feature? but they'll already ignore unknown channels..)\r\n\r\nThere's also the complication that built-in `MC|` channels do not need registration. For these reasons, maybe (un)registration should be explicit. Have the API allow listening on arbitrary channels (possibly multiple listeners per channel?), and register/unregister a list of channels as specified.\r\n\r\nAnyways, I like the idea of creating channels using nodejs streams. This solves most of the API design problem, since nodejs streams are a standard API other modules can easily hook into. Maybe bidirectional streams, to easily allow sending/receiving on an outgoing/incoming channel of the same name. [stream.Duplex](https://nodejs.org/api/stream.html#stream_class_stream_duplex_1). Or keep them separate `Writable`/`Readable` for simplicity, not too strong of an opinion about either way.\r\n\r\ntodo: change to use streams and update nmp-forge",
            "created_at": "2016-01-26T02:31:13Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-174783318",
            "id": 174783318,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-26T02:31:13Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/174783318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "Hmm, a Duplex stream might make sense. Then the api would be reduced to a simple call like `client.channel('CHANNEL_NAME`);`, which is pwetty neat.\r\n\r\nConcerning the whole registration fiasco, CraftBukkit, IIRC, forces registration, otherwise it will just ignore the packets. I think we should do this by the spec.\r\n\r\nAs far as registering multiple channels at once, I really don't see much gain in that. The overhead of the channel packet is very very small, we're going from 10 bytes (\"REGISTER\".length + packetId + len) to 1 byte overhead. Not a huge win in the grand scheme of things, especially since channels are REGISTER'd extremely rarely in the 99.999% case. \r\n\r\nKeeping the API simple is important. I don't think multiple channel registration is such a desperately needed feature we should make the API more complex.",
            "created_at": "2016-01-26T03:02:32Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-174792442",
            "id": 174792442,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-26T03:04:03Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/174792442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=3",
                "events_url": "https://api.github.com/users/roblabla/events{/privacy}",
                "followers_url": "https://api.github.com/users/roblabla/followers",
                "following_url": "https://api.github.com/users/roblabla/following{/other_user}",
                "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/roblabla",
                "id": 1069318,
                "login": "roblabla",
                "organizations_url": "https://api.github.com/users/roblabla/orgs",
                "received_events_url": "https://api.github.com/users/roblabla/received_events",
                "repos_url": "https://api.github.com/users/roblabla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/roblabla"
            }
        },
        {
            "body": "I suppose if Forge accepts its channel registration in multiple REGISTER packets, it could be acceptable for the API to not support multiple simultaneous channel registrations. Would need to test to be sure, but it is probably fine. Another quirk in Forge's channel registration is that it registers the \"FML\" channel twice (it sends `FML|HS\\x00FML\\x00FML|MP\\x00FML\\x00FORGE`), probably a bug I but I tried to match the behavior byte-for-byte in nmp-forge, granted maybe unnecessarily",
            "created_at": "2016-01-27T21:07:15Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-175852434",
            "id": 175852434,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-27T21:07:15Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/175852434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "Yeah, that is a bug. And i know multiple register packets work. Used to do\nthat back when i did mod dev, and it shouldn't have changed since then.\n\nOn Wed, Jan 27, 2016, 10:07 PM deathcap <notifications@github.com> wrote:\n\n> I suppose if Forge accepts its channel registration in multiple REGISTER\n> packets, it could be acceptable for the API to not support multiple\n> simultaneous channel registrations. Would need to test to be sure, but it\n> is probably fine. Another quirk in Forge's channel registration is that it\n> registers the \"FML\" channel twice (it sends\n> FML|HS\\x00FML\\x00FML|MP\\x00FML\\x00FORGE), probably a bug I but I tried to\n> match the behavior byte-for-byte in nmp-forge, granted maybe unnecessarily\n>\n> —\n> Reply to this email directly or view it on GitHub\n> <https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-175852434>\n> .\n>\n",
            "created_at": "2016-01-27T23:15:36Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-175906894",
            "id": 175906894,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-27T23:15:36Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/175906894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=3",
                "events_url": "https://api.github.com/users/roblabla/events{/privacy}",
                "followers_url": "https://api.github.com/users/roblabla/followers",
                "following_url": "https://api.github.com/users/roblabla/following{/other_user}",
                "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/roblabla",
                "id": 1069318,
                "login": "roblabla",
                "organizations_url": "https://api.github.com/users/roblabla/orgs",
                "received_events_url": "https://api.github.com/users/roblabla/received_events",
                "repos_url": "https://api.github.com/users/roblabla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/roblabla"
            }
        },
        {
            "body": "Started to convert to use a Duplex stream, but got stuck on implementing the `_read()` stream method from an event emitter. This looks useful:\r\n\r\nhttps://github.com/substack/emit-stream - turn event emitters into streams and streams into event emitters\r\n\r\nbut not clear how it interacts with Duplex streams (as it returns a Stream). Having second thoughts about Duplex streams versus separate readable and writables. The WHATWG standard web stream project, which has Node.js developers participating to improve on the streams spec, decided against duplex streams in preference to pairs of streams on each end: https://github.com/whatwg/streams/blob/master/FAQ.md#what-are-the-main-differences-between-these-streams-and-nodejs-streams\r\n\r\n> For the concept of something with a writable end and a readable end, we have \"duplex streams.\" Duplex streams are really just containers for a pair of streams, one writable and one readable, stored in the properties writable and readable respectively.",
            "created_at": "2016-01-29T06:03:21Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-176590623",
            "id": 176590623,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-29T06:03:21Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/176590623",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "For _read(), what you should do is something like\r\n\r\n```js\r\nvar readable = new Readable();\r\nreadable._read = function() {\r\n  // First, read everything currently in the cache.\r\n  var areWeDone = false;\r\n  while (readable.readStuff.length > 0 && areWeDone) {\r\n    areWeDone = this.push(this.readStuff.unshift());\r\n  }\r\n  // If we want more, wait until we get more\r\n  if (!areWeDone)\r\n    client.on('custom_payload', function bleh(data) {\r\n       // When push returns false, we should stop reading until _read is called again.\r\n      if (!this.push(this.readStuff.unshift()))\r\n        client.removeEventListener('custom_payload', bleh);\r\n    });\r\n};\r\n\r\nreadable.readStuff = [];\r\nclient.on('custom_payload', function(data) {\r\n  if (data.channel === \"stuff\")\r\n    readable.readStuff.push(data);\r\n});\r\n```",
            "created_at": "2016-01-29T11:46:17Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-176709159",
            "id": 176709159,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-29T11:46:17Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/176709159",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=3",
                "events_url": "https://api.github.com/users/roblabla/events{/privacy}",
                "followers_url": "https://api.github.com/users/roblabla/followers",
                "following_url": "https://api.github.com/users/roblabla/following{/other_user}",
                "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/roblabla",
                "id": 1069318,
                "login": "roblabla",
                "organizations_url": "https://api.github.com/users/roblabla/orgs",
                "received_events_url": "https://api.github.com/users/roblabla/received_events",
                "repos_url": "https://api.github.com/users/roblabla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/roblabla"
            }
        },
        {
            "body": "Thanks, will add",
            "created_at": "2016-01-30T06:52:21Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-177090165",
            "id": 177090165,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-30T06:52:21Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/177090165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "Hmm, maybe it would be cleaner if the parsed protocol data was available as a Stream as well, (as opposed an event emitter)? \r\n\r\nThis would avoid the need for the plugin channel API to translate event emitter to stream (which could also probably be done with https://github.com/substack/emit-stream).\r\n\r\nAnd then the plugin channel code could simply read the parsed packet stream, and [divert](https://github.com/voxel/voxel-clientmc/blob/master/mf-worker.js#L15-L30) custom_payload to its own per-channel streams.",
            "created_at": "2016-01-30T07:00:17Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-177090467",
            "id": 177090467,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-30T07:00:17Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/177090467",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        },
        {
            "body": "It is available in client.deserializer I think. (But that stream is changed\nwhen the state changed so you need to redo your piping when it changes,\nmaybe we could wrap this into a single stream so people can just pipe it\nwithout worrying about it changing)\n\nOn Sat, Jan 30, 2016, 08:00 deathcap <notifications@github.com> wrote:\n\n> Hmm, maybe it would be cleaner if the parsed protocol data was available\n> as a Stream as well, (as opposed an event emitter)?\n>\n> This would avoid the need for the plugin channel API to translate event\n> emitter to stream (which could also probably be done with\n> https://github.com/substack/emit-stream).\n>\n> And then the plugin channel code could simply read the parsed packet\n> stream, and divert\n> <https://github.com/voxel/voxel-clientmc/blob/master/mf-worker.js#L15-L30>\n> custom_payload to its own per-channel streams.\n>\n> —\n> Reply to this email directly or view it on GitHub\n> <https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-177090467>\n> .\n>\n",
            "created_at": "2016-01-30T07:28:12Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-177092995",
            "id": 177092995,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-01-30T07:28:12Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/177092995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2346494?v=3",
                "events_url": "https://api.github.com/users/rom1504/events{/privacy}",
                "followers_url": "https://api.github.com/users/rom1504/followers",
                "following_url": "https://api.github.com/users/rom1504/following{/other_user}",
                "gists_url": "https://api.github.com/users/rom1504/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rom1504",
                "id": 2346494,
                "login": "rom1504",
                "organizations_url": "https://api.github.com/users/rom1504/orgs",
                "received_events_url": "https://api.github.com/users/rom1504/received_events",
                "repos_url": "https://api.github.com/users/rom1504/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rom1504/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rom1504/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rom1504"
            }
        },
        {
            "body": "Closing this for now, I think a plugin channel API could be interesting but would need to nail down the use cases and API, maybe have a 'packet stream' for parsed packets available first, wrapping client.deserializer. Sort of like the other end of https://github.com/PrismarineJS/node-minecraft-protocol/pull/320 (streams in, and streams out)",
            "created_at": "2016-02-01T17:54:09Z",
            "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328#issuecomment-178094735",
            "id": 178094735,
            "issue_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
            "updated_at": "2016-02-01T17:54:09Z",
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/comments/178094735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328/comments",
    "created_at": "2016-01-24T17:41:49Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-01-24T18:49:01Z",
            "event": "renamed",
            "id": 524315986,
            "rename": {
                "from": "[WIP] Add plugin channel API to NMP",
                "to": "Add plugin channel API to NMP"
            },
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/events/524315986"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-01-25T16:20:57Z",
            "event": "renamed",
            "id": 525185645,
            "rename": {
                "from": "Add plugin channel API to NMP",
                "to": "[WIP] Add plugin channel API to NMP"
            },
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/events/525185645"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
                "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathcap/followers",
                "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathcap",
                "id": 5897956,
                "login": "deathcap",
                "organizations_url": "https://api.github.com/users/deathcap/orgs",
                "received_events_url": "https://api.github.com/users/deathcap/received_events",
                "repos_url": "https://api.github.com/users/deathcap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathcap"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-02-01T17:54:09Z",
            "event": "closed",
            "id": 534557975,
            "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/events/534557975"
        }
    ],
    "events_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328/events",
    "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328",
    "id": 128412878,
    "labels": [],
    "labels_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 328,
    "pull_request": {
        "diff_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328.diff",
        "html_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328",
        "patch_url": "https://github.com/PrismarineJS/node-minecraft-protocol/pull/328.patch",
        "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/pulls/328"
    },
    "repository_url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol",
    "state": "closed",
    "title": "[WIP] Add plugin channel API to NMP",
    "updated_at": "2016-02-01T17:54:09Z",
    "url": "https://api.github.com/repos/PrismarineJS/node-minecraft-protocol/issues/328",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5897956?v=3",
        "events_url": "https://api.github.com/users/deathcap/events{/privacy}",
        "followers_url": "https://api.github.com/users/deathcap/followers",
        "following_url": "https://api.github.com/users/deathcap/following{/other_user}",
        "gists_url": "https://api.github.com/users/deathcap/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/deathcap",
        "id": 5897956,
        "login": "deathcap",
        "organizations_url": "https://api.github.com/users/deathcap/orgs",
        "received_events_url": "https://api.github.com/users/deathcap/received_events",
        "repos_url": "https://api.github.com/users/deathcap/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/deathcap/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/deathcap/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/deathcap"
    }
}